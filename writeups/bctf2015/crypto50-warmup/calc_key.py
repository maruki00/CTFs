def egcd(a, b):
    x,y, u,v = 0,1, 1,0
    while a != 0:
        q, r = b//a, b%a
        m, n = x-u*q, y-v*q
        b,a, x,y, u,v = a,r, u,v, m,n
    gcd = b
    return gcd, x, y
def modinv(a, m):
    gcd, x, y = egcd(a, m)
    if gcd != 1:
        return None  # modular inverse does not exist
    else:
        return x % m
p = 317057890181414469666040372874657888470518637636378992714996906808811767347698361825453788201655367013267374494850325311308704150787266971407342622878242861647297030974411657137399520160932470945499064402456059374085028709386054015305540485630054050704209243043242436773039716793288587265042228064198304717861
q =  346833078117004767934987152587133647434474297161417369159543075326927432680882058031442675506196435665025219376801086377035442415567634506375799494435093165430094291146094126228574765505565545507921243576702066613132332029400023943146974027979295578481488937303630614817486209376457065143064450479466239275481

e=30749686305802061816334591167284030734478031427751495527922388099381921172620569310945418007467306454160014597828390709770861577479329793948103408489494025272834473555854835044153374978554414416305012267643957838998648651100705446875979573675767605387333733876537528353237076626094553367977134079292593746416875606876735717905892280664538346000950343671655257046364067221469807138232820446015769882472160551840052921930357988334306659120253114790638496480092361951536576427295789429197483597859657977832368912534761100269065509351345050758943674651053419982561094432258103614830448382949765459939698951824447818497599

N=109966163992903243770643456296093759130737510333736483352345488643432614201030629970207047930115652268531222079508230987041869779760776072105738457123387124961036111210544028669181361694095594938869077306417325203381820822917059651429857093388618818437282624857927551285811542685269229705594166370426152128895901914709902037365652575730201897361139518816164746228733410283595236405985958414491372301878718635708605256444921222945267625853091126691358833453283744166617463257821375566155675868452032401961727814314481343467702299949407935602389342183536222842556906657001984320973035314726867840698884052182976760066141

print "p=" + str(p)
print "q=" + str(q)
print "p*q = " + str(p*q)
print '--'
print "e=" + str(e)
print "N=" + str(N)

phi_n = (p-1) * (q-1)
d = modinv(e, phi_n)

print "d=" + str(d)


c=0x1e04304936215de8e21965cfca9c245b1a8f38339875d36779c0f123c475bc24d5eef50e7d9ff5830e80c62e8083ec55f27456c80b0ab26546b9aeb8af30e82b650690a2ed7ea407dcd094ab9c9d3d25a93b2140dcebae1814610302896e67f3ae37d108cd029fae6362ea7ac1168974c1a747ec9173799e1107e7a56d783660418ebdf6898d7037cea25867093216c2c702ef3eef71f694a6063f5f0f1179c8a2afe9898ae8dec5bb393cdffa3a52a297cd96d1ea602309ecf47cd009829b44ed3100cf6194510c53c25ca7435f60ce5f4f614cdd2c63756093b848a70aade002d6bc8f316c9e5503f32d39a56193d1d92b697b48f5aa43417631846824b5e86


#msg= c**d
#print msg


from Crypto.PublicKey import RSA
tup = (N, e, d, p, q)
my_rsa= RSA.construct(tup)

print "DECRYPT:"
plain = my_rsa.decrypt(c)
print plain

ckey=""

while plain > 0:
    ckey += chr(plain %256)
    plain = plain >> 8;

print ckey[::-1]




