#!/usr/bin/env python
from pwn import *
import hashlib
import string
import base64
import subprocess
import sys

class PAKE(object):
    def __init__(self):
        self.r = r = remote('52.197.112.79', 20431)

        r.recvuntil('prefix: ')
        prefix = base64.b64decode(r.recvuntil('\n'))

        p = subprocess.Popen(['./pow'], stdin=-1, stdout=-1)
        block, _ = p.communicate(prefix)

        r.sendline(base64.b64encode(block[len(prefix):]))

    def prime(self):
        self.r.recvuntil('p = ')
        return int(self.r.recvline()[:-1])

    def bb(self):
        self.r.recvuntil('Server send ')
        return int(self.r.recvline()[:-1])

    def aa(self, val):
        self.r.sendline(str(val))

    def flag(self):
        self.r.recvuntil('Flag is (of course after encryption :D): ')
        return int(self.r.recvline()[:-1])

''' Brute force one password at a time '''
def main():
    y = int(sys.argv[1])
    for x in xrange(1, 17):
        b = 10000
        c1 = PAKE()
        c2 = PAKE()
        k3 = 0

        p = c1.prime()
        assert c2.prime() == p

        for i in xrange(11):
            if i == y:
                pw = int(hashlib.sha512(str(x)).hexdigest(), 16)
                w = pow(pw, 2, p)
                a1 = c1.bb()
                a2 = c2.bb()
                c1.aa(pow(w, b, p))
                c2.aa(pow(w, b, p))
                k3 = int(hashlib.sha512(str(pow(a1, b, p))).hexdigest(), 16) ^ int(hashlib.sha512(str(pow(a2, b, p))).hexdigest(), 16)
            else:
                a1 = c1.bb()
                a2 = c2.bb()
                c1.aa(a2)
                c2.aa(a1)

        k1 = c1.flag()
        k2 = c2.flag()

        if k1 ^ k2 ^ k3 == 0:
            print x
            return

''' Once we know the passwords, get the flag '''
def main2():
    pws = [8,15,9,15,7,7,13,14,10,15,13]
    c = PAKE()
    p = c.prime()
    k = 0
    b = 10000
    for i in xrange(11):
        x = pws[i]
        pw = int(hashlib.sha512(str(x)).hexdigest(), 16)
        w = pow(pw, 2, p)
        a1 = c.bb()
        c.aa(pow(w, b, p))
        k ^= int(hashlib.sha512(str(pow(a1, b, p))).hexdigest(), 16)
    print hex(c.flag() ^ k)

main2()
