data = """30 82 02 5c 02 01 00 02 81 81 00 ae 68 61 d4 73 a6 33 31 33 c2 1a 5e be f5 ec 90 ea 85 77 ea c2 db 62 73 b5 29 5d c2 bb 3a 3c d1 50 bb d4 d4 9e ee 33 dd 3b 30 45 3c eb be f1 1f 67 e4 05 5c 8b 9c 6f 3a 56 ba e2 ba ec 9a a7 d0 43 ed bc 27 50 46 c8 40 92 2e 87 b6 24 e3 f4 c3 1b d6 bd ad 55 a4 51 64 23 10 d1 6c 14 fd 35 a8 18 a1 9f ab 33 14 f9 3e 50 34 c4 3c 28 b6 10 d2 fc 90 9b 97 60 d5 9a 13 e5 3e bf 38 d0 52 66 7d 02 03 01 00 01 02 81 80 03 7e 81 df 40 c5 e6 a6 a8 b3 cd d5 72 1b f9 36 5a 0c 7c 7f 8e 91 d8 a2 1a d2 0e 57 d5 6a 70 47 7d 47 96 17 00 6c 23 4b de 60 b4 32 69 42 b5 0f fd 03 db 7b a4 2c 69 2a 11 0c c3 78 1d 3f 67 f7 42 bc ba 38 ae cc 26 db ca 81 1e 49 fd fa 06 bd 32 83 3b 9e 66 1e 9b 8b 4f f5 04 5e 81 da 69 db 91 7e 0f 96 69 a1 51 93 b3 50 f4 84 10 d8 49 24 c6 b0 51 2b bc 7a e0 26 df 42 ef bb 9b 57 e2 dd 02 41 00 d9 8b 83 a9 f6 bd 94 cc ef 93 34 5a 35 ee 8b b3 4e 32 41 7c c6 9c 2a 5e f0 97 c2 45 3d 8f 68 1e 34 b7 b0 5f af 5e 9e fd 41 b8 ee 5c 8b 5a ca 4e b7 51 7a de 57 21 37 aa 40 9e 23 0a 51 1d ed 6b 02 41 00 cd 3c cb 39 7e ce df 9f d2 c8 67 9d 64 86 22 d3 e5 bc 3f 0a 33 32 b8 e0 3f dc a0 7f e6 a6 fc 87 df 4e 86 80 81 3a e4 e0 5e e1 41 1a d0 f4 b8 c2 4e 00 91 9a 1a f0 1e 38 9f ca 55 e2 a3 2d cd b7 02 41 00 81 29 7b 77 eb 5e ae 3d 6b 35 0c 4d 4f 5e 1d a5 cd 14 bb 9b 18 d4 d9 b7 5a c3 cf fd 8a 4a 5d f8 29 36 b2 ca 6c f6 12 11 ad f6 dd d7 26 8a 36 39 bc 4f ed 52 9b 8a c6 61 18 52 8b dd 71 42 02 97 02 40 12 ad 51 a1 2d d5 0d ac b1 b5 e3 18 03 a9 e1 49 7f 42 9e 4a 03 56 be 54 49 fb 7d ef a5 c1 d4 81 58 e5 00 80 79 42 2e c9 ec 58 7b 60 41 5b c3 e4 8a cc aa 73 67 b8 2a 47 e4 e2 b8 e6 23 0b 6c 09 02 40 3e 76 64 63 d4 83 b0 0e 62 46 b8 1f 0d e3 30 3e e9 16 40 79 8f 8a 77 30 66 ae 25 e6 c3 3b 75 7e ab 7e ff 4a 09 e0 38 ec b6 5d eb b3 85 59 c0 6d 55 4e a8 05 c3 71 ef 60 18 db 2b 6d cc 1e 92 fc"""
data = bytes.fromhex(data.replace(' ',''))

stack = """
  big_number[0] = 0x6f;
  big_number[1] = 0x86;
  big_number[2] = 0xe4;
  big_number[3] = 0x96;
  big_number[4] = 0x29;
  big_number[5] = 0xbe;
  big_number[6] = 0x8a;
  big_number[7] = 0x5e;
  big_number[8] = 0x21;
  big_number[9] = 0xe2;
  big_number[10] = 0xc0;
  big_number[11] = 0xda;
  big_number[12] = 0x25;
  big_number[13] = 0xb7;
  big_number[14] = 0x95;
  big_number[15] = 0xe0;
  big_number[16] = 0x5f;
  big_number[17] = 10;
  big_number[18] = 0x6c;
  big_number[19] = 0xe9;
  big_number[20] = 0x44;
  big_number[21] = 0xdb;
  big_number[22] = 0x12;
  big_number[23] = 0x4c;
  big_number[24] = 0x3a;
  big_number[25] = 0x6c;
  big_number[26] = 0x14;
  big_number[27] = 0x87;
  big_number[28] = 0xc6;
  big_number[29] = 0x36;
  big_number[30] = 0x6b;
  big_number[31] = 0x6d;
  big_number[32] = 0x95;
  big_number[33] = 6;
  big_number[34] = 0x1c;
  big_number[35] = 0x2d;
  big_number[36] = 0x11;
  big_number[37] = 0x9e;
  big_number[38] = 0xf8;
  big_number[39] = 0x72;
  big_number[40] = 0xcc;
  big_number[41] = 0x9b;
  big_number[42] = 0x74;
  big_number[43] = 0x87;
  big_number[44] = 0x73;
  big_number[45] = 0xa7;
  big_number[46] = 0x52;
  big_number[47] = 0x72;
  big_number[48] = 0xc;
  big_number[49] = 0x5b;
  big_number[50] = 0x92;
  big_number[51] = 0x8d;
  big_number[52] = 0x7c;
  big_number[53] = 0xa9;
  big_number[54] = 0x35;
  big_number[55] = 0xeb;
  big_number[56] = 0xc5;
  big_number[57] = 0xd6;
  big_number[58] = 0x1e;
  big_number[59] = 0x1c;
  big_number[60] = 0x9e;
  big_number[61] = 0x7e;
  big_number[62] = 0xd3;
  big_number[63] = 0x6e;
  big_number[64] = 0x43;
  big_number[65] = 0x35;
  big_number[66] = 0x93;
  big_number[67] = 0xd0;
  big_number[68] = 0x6c;
  big_number[69] = 0x26;
  big_number[70] = 0xb4;
  big_number[71] = 0x95;
  big_number[72] = 0xe5;
  big_number[73] = 0x99;
  big_number[74] = 0x28;
  big_number[75] = 99;
  big_number[76] = 0x5e;
  big_number[77] = 0xeb;
  big_number[78] = 0xad;
  big_number[79] = 0x40;
  big_number[80] = 0xce;
  big_number[81] = 0x26;
  big_number[82] = 0x67;
  big_number[83] = 0xf7;
  big_number[84] = 0x32;
  big_number[85] = 0xb2;
  big_number[86] = 3;
  big_number[87] = 0xd;
  big_number[88] = 0x30;
  big_number[89] = 0x24;
  big_number[90] = 0x93;
  big_number[91] = 0x84;
  big_number[92] = 0x3a;
  big_number[93] = 0x19;
  big_number[94] = 0xac;
  big_number[95] = 0x6f;
  big_number[96] = 0x11;
  big_number[97] = 0xbb;
  big_number[98] = 0xb;
  big_number[99] = 0x5b;
  big_number[100] = 0x41;
  big_number[101] = 0x8d;
  big_number[102] = 0x9d;
  big_number[103] = 0x49;
  big_number[104] = 0x1a;
  big_number[105] = 0xb1;
  big_number[106] = 0x21;
  big_number[107] = 0xd9;
  big_number[108] = 0x79;
  big_number[109] = 0x43;
  big_number[110] = 0xbc;
  big_number[111] = 0x83;
  big_number[112] = 0x1c;
  big_number[113] = 0x36;
  big_number[114] = 0x98;
  big_number[115] = 0xb9;
  big_number[116] = 0x5a;
  big_number[117] = 0x53;
  big_number[118] = 0xd9;
  big_number[119] = 0xf4;
  big_number[120] = 0xa3;
  big_number[121] = 0x99;
  big_number[122] = 0x34;
  big_number[123] = 0x67;
  big_number[124] = 0xa2;
  big_number[125] = 0x8b;
  big_number[126] = 0xce;
  big_number[127] = 6;
"""
stack = bytes(int(x.split(' ')[-1][:-1], 0) for x in stack.strip().splitlines())

from Crypto.PublicKey import RSA
import Crypto.Util

key = RSA.import_key(data)

c = Crypto.Util.number.bytes_to_long(stack)
print(key._encrypt(c).to_bytes(128, 'big'))

